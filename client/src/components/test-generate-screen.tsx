"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/gsZpOyFNo9p
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { SubmitHandler, useFieldArray, useForm } from "react-hook-form";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from "@/components/ui/select";
import {
  TooltipTrigger,
  TooltipContent,
  Tooltip,
  TooltipProvider,
} from "@/components/ui/tooltip";
import { useEffect, useRef, useState } from "react";
import instance from "@/lib/backend-connect";
import toast, { Toaster } from "react-hot-toast";
import { countPossibleCombinations } from "../lib/test-generation";
import { DateTimePicker } from "./ui/date-time-picker/date-time-picker";
import { DateValue } from "react-aria";

type Question = {
  question: string;
  options: {
    option: string;
    isCorrect: boolean;
  }[];
  marks: number;
  type: "singlecorrect" | "multicorrect";
};

type TestCreateForm = {
  title: string;
  duration: string;
  startTime: DateValue;
  totalMarks: string;
  questions: Question[]; // Question bank
};

export function TestGenerateScreen() {
  const { control, register, setValue, handleSubmit, watch } =
    useForm<TestCreateForm>({
      defaultValues: {
        title: "",
        duration: "",
        questions: [],
        totalMarks: "",
      },
    });

  const questions = watch("questions") as Question[];
  const totalMarks = parseInt(watch("totalMarks"));
  const startTime = watch("startTime");

  const [loading, setLoading] = useState(false);
  const [link, setLink] = useState<string | null>(null);
  const linkRef = useRef<HTMLInputElement>(null);
  const [copied, setCopied] = useState(false);

  const [file, setFile] = useState<File | null>(null);

  const onSubmit: SubmitHandler<TestCreateForm> = async (data) => {
    setLoading(true);
    try {
      const res = await instance.post("/test/admin/create", {
        name: data.title,
        questions: data.questions.map((q, qIdx) => {
          return {
            ...q,
            id: qIdx + 1,
            options: q.options.map((o, oIdx) => {
              return {
                ...o,
                id: oIdx + 1,
              };
            }),
          };
        }),
        generate: true,
        totalMarks: parseInt(data.totalMarks),
        startTime: data.startTime.toDate("ist").toISOString(),
        endTime: new Date(
          data.startTime.toDate("ist").getTime() +
            parseInt(data.duration) * 60 * 1000
        ).toISOString(),
      });
      setLink(res.data.data.id);
    } catch (err) {
      toast.error("Failed to create test");
    }
    setLoading(false);
  };

  const handleFileParsing = (file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      const questions = content
        .trim()
        .split("\n\n")
        .map((line) => {
          const [question, ...options] = line.trim().split("\n");
          const [ques, marks, type] = question.trim().split(",");
          return {
            question: ques,
            options: options.map((option) => {
              const [opt, isCorrect] = option.split(",");
              return {
                option: opt,
                isCorrect: isCorrect === "true",
              };
            }),
            marks: parseInt(marks),
            type: type as Question["type"],
          };
        });
      setValue("questions", questions);
    };
    reader.readAsText(file);
  };

  const possibleCombinations =
    questions.length > 0 && totalMarks > 0
      ? countPossibleCombinations(questions, totalMarks)
      : null;

  if (link) {
    // Show the link in a box that user can copy
    return (
      <>
        <Toaster />
        <div className="w-full max-w-2xl mx-auto  space-y-6 border rounded-lg shadow-md absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] p-16">
          <h1 className="text-2xl font-semibold text-center">Test Created</h1>
          <div className="space-y-2">
            <Label htmlFor="link">Test Link</Label>
            <TooltipProvider>
              <Tooltip open={copied}>
                <TooltipTrigger asChild>
                  <Input
                    id="link"
                    value={link}
                    readOnly
                    ref={linkRef}
                    onClick={() => {
                      linkRef.current?.select();
                      navigator.clipboard.writeText(link);
                      setCopied(true);
                      setTimeout(() => {
                        setCopied(false);
                      }, 1000);
                    }}
                  />
                </TooltipTrigger>
                <TooltipContent>
                  {copied ? (
                    <p>Copied to clipboard</p>
                  ) : (
                    <p>Click to copy the link</p>
                  )}
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
          <div className="flex justify-end">
            <Button
              onClick={() => {
                setLink(null);
              }}
            >
              Generate Another Test
            </Button>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Toaster />
      <div className="w-full max-w-2xl mx-auto space-y-6 border rounded-lg shadow-md absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] p-16 overflow-y-auto max-h-[calc(100vh-64px)]">
        <h1 className="text-2xl font-semibold text-center">Create Test</h1>
        <div className="space-y-2">
          <Label htmlFor="title">Title of the Test</Label>
          <Input
            id="title"
            placeholder="Enter test title"
            {...register("title")}
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="title">Test Start Time</Label>
            <DateTimePicker
              granularity={"minute"}
              onChange={(newDate) => {
                setValue("startTime", newDate);
              }}
              value={startTime}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="duration">Duration (in minutes)</Label>
            <Input
              id="duration"
              placeholder="Enter test duration"
              type="number"
              {...register("duration")}
            />
          </div>
        </div>
        <div className="space-y-2">
          <Label htmlFor="emails">Total Marks</Label>
          <Input
            id="duration"
            placeholder="Enter test duration"
            type="number"
            {...register("totalMarks")}
          />
        </div>
        <div className="space-y-2">
          {/* Upload div for csv */}
          <Label htmlFor="questions">Upload questions</Label>
          <div className="flex items-center gap-2">
            <input
              type="file"
              accept=".csv"
              onChange={(e) => {
                setFile(e.target.files?.[0] ?? null);
              }}
              value={file ? undefined : ""}
            />
            <Button
              onClick={() => {
                if (!file) {
                  return;
                }
                if (file && questions.length > 0) {
                  setFile(null);
                  setValue("questions", []);
                  return;
                }
                handleFileParsing(file);
              }}
            >
              {!(file && questions.length > 0) ? "Parse the csv" : "Clear"}
            </Button>
          </div>
          <div className="space-y-2">
            {questions.length > 0 && <p>{questions.length} Questions parsed</p>}
            {questions.length > 0 &&
              !isNaN(totalMarks) &&
              (possibleCombinations ? (
                <p>{possibleCombinations} Combination possible!</p>
              ) : (
                <p>Not enough questions to generate test</p>
              ))}
          </div>
          <div className="space-y-2">
            <Button
              disabled={
                loading ||
                questions.length === 0 ||
                isNaN(totalMarks) ||
                !possibleCombinations
              }
              loading={loading}
              onClick={handleSubmit(onSubmit)}
            >
              Create Test
            </Button>
          </div>
        </div>
      </div>
    </>
  );
}

const Options = ({
  control,
  questionIdx,
  register,
  setValue,
  watch,
  ...props
}: {
  control: any;
  questionIdx: number;
  register: any;
  setValue: any;
  watch: any;
}) => {
  const { fields, append, remove } = useFieldArray({
    control,
    name: `questions[${questionIdx}].options`,
  });

  const type = watch(`questions.${questionIdx}.type`);
  const options = watch(
    `questions.${questionIdx}.options`
  ) as Question["options"];

  useEffect(() => {
    options.forEach((option, idx) => {
      if (idx === 0) {
        setValue(`questions.${questionIdx}.options.${idx}.isCorrect`, true);
        return;
      }
      setValue(
        `questions.${questionIdx}.options.${idx}.isCorrect`,
        type === "singlecorrect" ? false : option.isCorrect
      );
    });
  }, [type]);

  useEffect(() => {
    if (type === "singlecorrect") {
      if (!options.some((option) => option.isCorrect) && options.length > 0) {
        setValue(`questions.${questionIdx}.options.0.isCorrect`, true);
      }
    }
  }, [options]);

  return (
    <div className="space-y-2">
      <div className="space-y-2">
        <Label htmlFor="options">Options</Label>
        {fields.map((field, idx) => {
          return (
            <div className="flex items-center gap-2" key={field.id}>
              <Input
                placeholder="Option"
                {...register(`questions.${questionIdx}.options.${idx}.option`)}
              />
              <input
                type={type === "singlecorrect" ? "radio" : "checkbox"}
                checked={options[idx].isCorrect}
                name={`questions.${questionIdx}`}
                onChange={(e) => {
                  if (type === "singlecorrect") {
                    options.forEach((option, idx) => {
                      setValue(
                        `questions.${questionIdx}.options.${idx}.isCorrect`,
                        false
                      );
                    });
                    setValue(
                      `questions.${questionIdx}.options.${idx}.isCorrect`,
                      true
                    );
                    return;
                  } else {
                    setValue(
                      `questions.${questionIdx}.options.${idx}.isCorrect`,
                      e.target.checked
                    );
                  }
                }}
              />
              <Button
                size="sm"
                variant="ghost"
                onClick={() => {
                  remove(idx);
                }}
              >
                Remove
              </Button>
            </div>
          );
        })}
        <div className="space-y-2">
          <Button
            size="sm"
            onClick={() => {
              append({
                option: "",
                isCorrect: options.length !== 0 ? false : true,
              });
            }}
          >
            Add Option
          </Button>
        </div>
      </div>
    </div>
  );
};
