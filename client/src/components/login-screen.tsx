/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/woeFYL9ZsTz
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useEffect, useRef, useState } from "react";
import { SubmitHandler, set, useForm } from "react-hook-form";
import instance from "@/lib/backend-connect";
import toast from "react-hot-toast";
import { AxiosError } from "axios";

type LoginForm = {
  email: string;
  name: string;
  password: string;
  face: File | null;
};

export function LoginScreen({
  onRegister,
}: {
  onRegister: (user: { email: string; name: string }) => void;
}) {
  const [loading, setLoading] = useState(false);
  const [stream, setStream] = useState<MediaStream | null>(null);

  const videoRef = useRef<HTMLVideoElement>();

  const { register, handleSubmit, setValue, watch } = useForm<LoginForm>();

  const face = watch("face");

  const onSubmit: SubmitHandler<LoginForm> = async (data) => {
    if (!data.face) {
      return;
    }
    setLoading(true);
    try {
      const formData = new FormData();
      formData.append("email", data.email);
      formData.append("name", data.name);
      formData.append("password", data.password);
      formData.append("face", data.face);
      const res = await instance.post("/auth/logister", formData);
      onRegister({
        email: data.email,
        name: data.name,
      });
    } catch (err) {
      if (err instanceof AxiosError)
        toast.error(`Error registering user - ${err.response?.data.error}`, {
          duration: 5000,
        });
      else if (err instanceof Error)
        toast.error(`Error registering user - ${err.message}`, {
          duration: 5000,
        });
      else
        toast.error(`Error registering user - ${err}`, {
          duration: 5000,
        });
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleStartCapture = async () => {
    if (stream && videoRef.current) {
      // Pause the video
      // Capture a picture
      // @ts-ignore
      const imageCapture = new ImageCapture(stream.getVideoTracks()[0]);
      const photo = await imageCapture.takePhoto();
      videoRef.current.pause();
      stream.getTracks().forEach((track) => {
        track.stop();
      });
      setValue("face", photo);
      setStream(null);
      return;
    }
    const s = await navigator.mediaDevices.getUserMedia({
      video: true,
    });
    if (!videoRef.current) return;
    videoRef.current.srcObject = s;
    videoRef.current.play();
    setStream(s);
  };

  return (
    <div className="flex items-center justify-center min-w-[500px]">
      <div className="w-full  space-y-6 rounded-lg bg-white shadow-lg dark:bg-gray-900 p-12">
        <div className="space-y-2 text-center">
          <h1 className="text-3xl font-bold">Login</h1>
          <p className="text-gray-500 dark:text-gray-400">
            Enter your credentials to access your account.
          </p>
        </div>
        <form
          className="space-y-4"
          onSubmit={(e) => {
            e.preventDefault();
          }}
        >
          <div className="space-y-2">
            <Label htmlFor="email">Name</Label>
            <Input
              placeholder="John Doe"
              required
              type="text"
              autoComplete="name"
              {...register("name")}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              placeholder="john@doe.com"
              required
              type="email"
              {...register("email")}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              required
              type="password"
              {...register("password")}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="webcam">Webcam Photo</Label>
            <div className="relative h-[200px] w-full overflow-hidden rounded-md bg-gray-100 dark:bg-gray-800">
              <div className="absolute inset-0 flex items-center justify-center">
                <video
                  className="absolute pointer-events-none w-full h-full object-cover"
                  // @ts-ignore
                  ref={videoRef}
                ></video>
                {!stream && !face && (
                  <Button
                    className="z-10"
                    size="sm"
                    onClick={() => {
                      handleStartCapture();
                    }}
                  >
                    Start Capture
                  </Button>
                )}
              </div>
            </div>
            {stream && !face && (
              <Button
                className="z-10 w-full"
                size="sm"
                onClick={() => {
                  handleStartCapture();
                }}
              >
                Capture
              </Button>
            )}
            {!stream && face && (
              <Button
                className="z-10 w-full"
                size="sm"
                onClick={() => {
                  setValue("face", null);
                  handleStartCapture();
                }}
              >
                Retake
              </Button>
            )}
          </div>
          <Button
            className="w-full"
            type="submit"
            loading={loading}
            onClick={() => {
              handleSubmit(onSubmit)();
            }}
          >
            Log in
          </Button>
        </form>
      </div>
    </div>
  );
}
