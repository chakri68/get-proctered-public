"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/gsZpOyFNo9p
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { SubmitHandler, useFieldArray, useForm } from "react-hook-form";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import Link from "next/link";

import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from "@/components/ui/select";
import {
  TooltipTrigger,
  TooltipContent,
  Tooltip,
  TooltipProvider,
} from "@/components/ui/tooltip";
import { useEffect, useRef, useState } from "react";
import instance from "@/lib/backend-connect";
import toast, { Toaster } from "react-hot-toast";
import { DateTimePicker } from "./ui/date-time-picker/date-time-picker";
import { DateValue } from "react-aria";

type Question = {
  question: string;
  options: {
    option: string;
    isCorrect: boolean;
  }[];
  marks: number;
  type: "singlecorrect" | "multicorrect";
};

type TestCreateForm = {
  title: string;
  duration: string;
  emails: string;
  startTime: DateValue;
  questions: Question[];
};

export function TestCreateScreen() {
  const { control, register, setValue, handleSubmit, watch } =
    useForm<TestCreateForm>({
      defaultValues: {
        title: "",
        duration: "",
        emails: "",
        questions: [],
      },
    });
  const startTime = watch("startTime");

  const [loading, setLoading] = useState(false);
  const [link, setLink] = useState<string | null>(null);
  const linkRef = useRef<HTMLInputElement>(null);
  const [copied, setCopied] = useState(false);

  const { append, fields, remove } = useFieldArray({
    control,
    name: "questions",
  });

  const onSubmit: SubmitHandler<TestCreateForm> = async (data) => {
    setLoading(true);
    try {
      const res = await instance.post("/test/admin/create", {
        name: data.title,
        questions: data.questions.map((q, qIdx) => {
          return {
            ...q,
            id: qIdx + 1,
            options: q.options.map((o, oIdx) => {
              return {
                ...o,
                id: oIdx + 1,
              };
            }),
          };
        }),
        generate: false,
        totalMarks: data.questions.reduce((acc, q) => acc + q.marks, 0),
        startTime: data.startTime.toDate("ist").toISOString(),
        endTime: new Date(
          data.startTime.toDate("ist").getTime() +
            parseInt(data.duration) * 60 * 1000
        ).toISOString(),
      });
      setLink(res.data.data.id);
    } catch (err) {
      toast.error("Failed to create test");
    }
    setLoading(false);
  };

  if (link) {
    // Show the link in a box that user can copy
    return (
      <>
        <Toaster />
        <div className="w-full max-w-2xl mx-auto  space-y-6 border rounded-lg shadow-md absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] p-16">
          <h1 className="text-2xl font-semibold text-center">Test Created</h1>
          <div className="space-y-2">
            <Label htmlFor="link">Test Link</Label>
            <TooltipProvider>
              <Tooltip open={copied}>
                <TooltipTrigger asChild>
                  <Input
                    id="link"
                    value={link}
                    readOnly
                    ref={linkRef}
                    onClick={() => {
                      linkRef.current?.select();
                      navigator.clipboard.writeText(link);
                      setCopied(true);
                      setTimeout(() => {
                        setCopied(false);
                      }, 1000);
                    }}
                  />
                </TooltipTrigger>
                <TooltipContent>
                  {copied ? (
                    <p>Copied to clipboard</p>
                  ) : (
                    <p>Click to copy the link</p>
                  )}
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
          <div className="flex justify-end">
            <Button
              onClick={() => {
                setLink(null);
              }}
            >
              Create Another Test
            </Button>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Toaster />
      <Link href="./generate">
        <button className="rounded-lg shadow-md flex font-semibold items-center p-3 absolute top-[10%] left-[50%] -translate-x-[50%] -translate-y-[50%]">
          <span>Generate Test via CSV file</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            stroke="currentColor"
            className="ml-2 -mt-1 w-5 h-5"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"
            />
          </svg>
        </button>
      </Link>
      <div className="w-full max-w-2xl mx-auto space-y-6 border rounded-lg shadow-md absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] p-16 overflow-y-auto max-h-[calc(100vh-64px)]">
        <h1 className="text-2xl font-semibold text-center">Create Test</h1>
        <div className="space-y-2">
          <Label htmlFor="title">Title of the Test</Label>
          <Input
            id="title"
            placeholder="Enter test title"
            {...register("title")}
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="title">Test Start Time</Label>
            <DateTimePicker
              granularity={"minute"}
              onChange={(val) => {
                setValue("startTime", val);
              }}
              value={startTime}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="duration">Duration (in minutes)</Label>
            <Input
              id="duration"
              placeholder="Enter test duration"
              type="number"
              {...register("duration")}
            />
          </div>
        </div>
        <div className="space-y-2">
          <Label htmlFor="emails">Allowed Student Emails</Label>
          <Textarea
            className="min-h-[100px]"
            id="emails"
            placeholder="Enter student emails separated by commas"
            {...register("emails")}
          />
        </div>
        <div className="space-y-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Test Questions</h3>
              <Button
                size="sm"
                onClick={() => {
                  append({
                    question: "",
                    options: [],
                    marks: 5,
                    type: "singlecorrect",
                  });
                }}
              >
                Add Question
              </Button>
            </div>
            {fields.map((field, idx) => {
              return (
                <div className="space-y-4" key={field.id}>
                  <div className="space-y-2">
                    <Label htmlFor="question">Question</Label>
                    <Input
                      id="question"
                      placeholder="Enter question"
                      {...register(`questions.${idx}.question`)}
                    />
                  </div>
                  <Options
                    control={control}
                    questionIdx={idx}
                    register={register}
                    setValue={setValue}
                    watch={watch}
                  />
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="marks">Marks</Label>
                      <Input
                        id="marks"
                        placeholder="Enter marks"
                        type="number"
                        {...register(`questions.${idx}.marks`, {
                          valueAsNumber: true,
                        })}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="type">Type</Label>
                      <Select
                        defaultValue={"singlecorrect"}
                        onValueChange={(value) => {
                          setValue(
                            `questions.${idx}.type`,
                            value as "singlecorrect" | "multicorrect"
                          );
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="singlecorrect">
                            Single-Correct
                          </SelectItem>
                          <SelectItem value="multicorrect">
                            Multi-Correct
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
        <div className="flex justify-end">
          <Button
            loading={loading}
            type="submit"
            onClick={() => {
              handleSubmit(onSubmit)();
            }}
          >
            Create Test
          </Button>
        </div>
      </div>
      <Button className="rounded-lg shadow-md flex font-semibold items-center p-3 absolute top-[90%] left-[85%] -translate-x-[50%] -translate-y-[50%] bg-gradient-to-r from-pink-400 to-purple-400 text-white">
        <span>Generate Questions with AI</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth={1.5}
          stroke="currentColor"
          className="ml-2 w-6 h-6"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM16.894 20.567 16.5 21.75l-.394-1.183a2.25 2.25 0 0 0-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 0 0 1.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 0 0 1.423 1.423l1.183.394-1.183.394a2.25 2.25 0 0 0-1.423 1.423Z"
          />
        </svg>
      </Button>
    </>
  );
}

const Options = ({
  control,
  questionIdx,
  register,
  setValue,
  watch,
  ...props
}: {
  control: any;
  questionIdx: number;
  register: any;
  setValue: any;
  watch: any;
}) => {
  const { fields, append, remove } = useFieldArray({
    control,
    name: `questions[${questionIdx}].options`,
  });

  const type = watch(`questions.${questionIdx}.type`);
  const options = watch(
    `questions.${questionIdx}.options`
  ) as Question["options"];

  useEffect(() => {
    options.forEach((option, idx) => {
      if (idx === 0) {
        setValue(`questions.${questionIdx}.options.${idx}.isCorrect`, true);
        return;
      }
      setValue(
        `questions.${questionIdx}.options.${idx}.isCorrect`,
        type === "singlecorrect" ? false : option.isCorrect
      );
    });
  }, [type]);

  useEffect(() => {
    if (type === "singlecorrect") {
      if (!options.some((option) => option.isCorrect) && options.length > 0) {
        setValue(`questions.${questionIdx}.options.0.isCorrect`, true);
      }
    }
  }, [options]);

  return (
    <div className="space-y-2">
      <div className="space-y-2">
        <Label htmlFor="options">Options</Label>
        {fields.map((field, idx) => {
          return (
            <div className="flex items-center gap-2" key={field.id}>
              <Input
                placeholder="Option"
                {...register(`questions.${questionIdx}.options.${idx}.option`)}
              />
              <input
                type={type === "singlecorrect" ? "radio" : "checkbox"}
                checked={options[idx].isCorrect}
                name={`questions.${questionIdx}`}
                onChange={(e) => {
                  if (type === "singlecorrect") {
                    options.forEach((option, idx) => {
                      setValue(
                        `questions.${questionIdx}.options.${idx}.isCorrect`,
                        false
                      );
                    });
                    setValue(
                      `questions.${questionIdx}.options.${idx}.isCorrect`,
                      true
                    );
                    return;
                  } else {
                    setValue(
                      `questions.${questionIdx}.options.${idx}.isCorrect`,
                      e.target.checked
                    );
                  }
                }}
              />
              <Button
                size="sm"
                variant="ghost"
                onClick={() => {
                  remove(idx);
                }}
              >
                Remove
              </Button>
            </div>
          );
        })}
        <div className="flex justify-between mb-2">
          <Button
            onClick={() => {
              append({
                option: "",
                isCorrect: options.length !== 0 ? false : true,
              });
            }}
          >
            Add Option
          </Button>
          <Button className="bg-red-600 hover:bg-red-500">
            Remove Question
          </Button>
        </div>
      </div>
    </div>
  );
};
