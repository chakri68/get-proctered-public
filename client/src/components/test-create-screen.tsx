"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/gsZpOyFNo9p
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { SubmitHandler, useFieldArray, useForm } from "react-hook-form";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import {
  SelectValue,
  SelectTrigger,
  SelectItem,
  SelectContent,
  Select,
} from "@/components/ui/select";
import {
  TooltipTrigger,
  TooltipContent,
  Tooltip,
  TooltipProvider,
} from "@/components/ui/tooltip";
import { useEffect, useRef, useState } from "react";
import instance from "@/lib/backend-connect";

type Question = {
  question: string;
  options: {
    option: string;
    isCorrect: boolean;
  }[];
  marks: number;
  type: "singlecorrect" | "multicorrect";
};

type TestCreateForm = {
  title: string;
  duration: string;
  emails: string;
  questions: Question[];
};

export function TestCreateScreen() {
  const { control, register, setValue, handleSubmit, watch } =
    useForm<TestCreateForm>({
      defaultValues: {
        title: "",
        duration: "",
        emails: "",
        questions: [],
      },
    });

  const [loading, setLoading] = useState(false);
  const [link, setLink] = useState<string | null>(null);
  const linkRef = useRef<HTMLInputElement>(null);
  const [copied, setCopied] = useState(false);

  const { append, fields, remove } = useFieldArray({
    control,
    name: "questions",
  });

  const onSubmit: SubmitHandler<TestCreateForm> = async (data) => {
    setLoading(true);
    console.log({ data });
    await instance.post("/test/create", {
      name: data.title,
      questions: data.questions.map((q, qIdx) => {
        return {
          ...q,
          id: qIdx + 1,
          options: q.options.map((o, oIdx) => {
            return {
              ...o,
              id: oIdx + 1,
            };
          }),
        };
      }),
    });
    setLoading(false);
    setLink("https://example.com/test/123");
  };

  if (link) {
    // Show the link in a box that user can copy
    return (
      <div className="w-full max-w-2xl mx-auto  space-y-6 border rounded-lg shadow-md absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] p-16">
        <h1 className="text-2xl font-semibold text-center">Test Created</h1>
        <div className="space-y-2">
          <Label htmlFor="link">Test Link</Label>
          <TooltipProvider>
            <Tooltip open={copied}>
              <TooltipTrigger asChild>
                <Input
                  id="link"
                  value={link}
                  readOnly
                  ref={linkRef}
                  onClick={() => {
                    linkRef.current?.select();
                    navigator.clipboard.writeText(link);
                    setCopied(true);
                    setTimeout(() => {
                      setCopied(false);
                    }, 1000);
                  }}
                />
              </TooltipTrigger>
              <TooltipContent>
                {copied ? (
                  <p>Copied to clipboard</p>
                ) : (
                  <p>Click to copy the link</p>
                )}
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
        <div className="flex justify-end">
          <Button
            onClick={() => {
              setLink(null);
            }}
          >
            Create Another Test
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-2xl mx-auto space-y-6 border rounded-lg shadow-md absolute top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] p-16 overflow-y-auto max-h-[calc(100vh-64px)]">
      <h1 className="text-2xl font-semibold text-center">Create Test</h1>
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="title">Title of the Test</Label>
          <Input
            id="title"
            placeholder="Enter test title"
            {...register("title")}
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="duration">Duration (in minutes)</Label>
          <Input
            id="duration"
            placeholder="Enter test duration"
            type="number"
            {...register("duration")}
          />
        </div>
      </div>
      <div className="space-y-2">
        <Label htmlFor="emails">Allowed Student Emails</Label>
        <Textarea
          className="min-h-[100px]"
          id="emails"
          placeholder="Enter student emails separated by commas"
          {...register("emails")}
        />
      </div>
      <div className="space-y-6">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium">Test Questions</h3>
            <Button
              size="sm"
              onClick={() => {
                append({
                  question: "",
                  options: [],
                  marks: 5,
                  type: "singlecorrect",
                });
              }}
            >
              Add Question
            </Button>
          </div>
          {fields.map((field, idx) => {
            return (
              <div className="space-y-4" key={field.id}>
                <div className="space-y-2">
                  <Label htmlFor="question">Question</Label>
                  <Input
                    id="question"
                    placeholder="Enter question"
                    {...register(`questions.${idx}.question`)}
                  />
                </div>
                <Options
                  control={control}
                  questionIdx={idx}
                  register={register}
                  setValue={setValue}
                  watch={watch}
                />
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="marks">Marks</Label>
                    <Input
                      id="marks"
                      placeholder="Enter marks"
                      type="number"
                      {...register(`questions.${idx}.marks`)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="type">Type</Label>
                    <Select
                      onValueChange={(value) => {
                        setValue(
                          `questions.${idx}.type`,
                          value as "singlecorrect" | "multicorrect"
                        );
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="singlecorrect">
                          Single-Correct
                        </SelectItem>
                        <SelectItem value="multicorrect">
                          Multi-Correct
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
      <div className="flex justify-end">
        <Button
          loading={loading}
          type="submit"
          onClick={() => {
            handleSubmit(onSubmit)();
          }}
        >
          Create Test
        </Button>
      </div>
    </div>
  );
}

const Options = ({
  control,
  questionIdx,
  register,
  setValue,
  watch,
  ...props
}: {
  control: any;
  questionIdx: number;
  register: any;
  setValue: any;
  watch: any;
}) => {
  const { fields, append, remove } = useFieldArray({
    control,
    name: `questions[${questionIdx}].options`,
  });

  const type = watch(`questions.${questionIdx}.type`);
  const options = watch(
    `questions.${questionIdx}.options`
  ) as Question["options"];

  useEffect(() => {
    console.log({ type, options });
    options.forEach((option, idx) => {
      if (idx === 0) {
        setValue(`questions.${questionIdx}.options.${idx}.isCorrect`, true);
        return;
      }
      setValue(
        `questions.${questionIdx}.options.${idx}.isCorrect`,
        type === "singlecorrect" ? false : option.isCorrect
      );
    });
  }, [type]);

  return (
    <div className="space-y-2">
      <div className="space-y-2">
        <Label htmlFor="options">Options</Label>
        {fields.map((field, idx) => {
          return (
            <div className="flex items-center gap-2" key={field.id}>
              <Input
                placeholder="Option"
                {...register(`questions.${questionIdx}.options.${idx}.option`)}
              />
              <input
                type={type === "singlecorrect" ? "radio" : "checkbox"}
                checked={options[idx].isCorrect}
                name={`questions.${questionIdx}`}
                onChange={(e) => {
                  setValue(
                    `questions.${questionIdx}.options.${idx}.isCorrect`,
                    !options[idx].isCorrect
                  );
                }}
              />
              <Button
                size="sm"
                variant="ghost"
                onClick={() => {
                  remove(idx);
                }}
              >
                Remove
              </Button>
            </div>
          );
        })}
        <div className="space-y-2">
          <Button
            size="sm"
            onClick={() => {
              append({
                option: "",
                isCorrect: options.length !== 0 ? false : true,
              });
            }}
          >
            Add Option
          </Button>
        </div>
      </div>
    </div>
  );
};
